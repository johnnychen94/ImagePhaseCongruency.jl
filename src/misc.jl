#=--------------------------------------------------------------------

misc - Miscellaneous functions...

Copyright (c) 2015 Peter Kovesi
peterkovesi.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

The Software is provided "as is", without warranty of any kind.

PK August 2015

---------------------------------------------------------------------=#

# export interp2


#----------------------------------------------------------------------
"""
Basic implementation of interp2
```
Usage: zi = interp2(x,y,z, xi, yi)
```
Find interpolated values zi at locations xi, yi within grid defined by
x, y note that x, y must be monotonic and plaid as if they were
generated by meshgrid

Ideally I should use the Grid package but until it gets some better
documentation this will have to do...
"""
function interp2(x::Array, y::Array, z::Array, xi::Array, yi::Array)

# To be fixed...
# Note the following code does not use x and y and implcitly assumes x
# and y start at 1.


    (rows,cols) = size(xi)  # should check that yi is the same size
    zi = zeros(rows,cols)   # should be same type as z

    for r = 1:rows
        for c = 1:cols
            f00 = z[floor(yi[r,c]), floor(xi[r,c])]  # top left
            f10 = z[floor(yi[r,c]), ceil(xi[r,c])]  # top right
            f01 = z[ceil(yi[r,c]), floor(xi[r,c])]   # bottom left
            f11 = z[ceil(yi[r,c]), ceil(xi[r,c])]  # bottom right

            xf = xi[r,c] - floor(xi[r,c])
            yf = yi[r,c] - floor(yi[r,c])

            zi[r,c] = f00*(1-xf)*(1-yf) +
                      f10*(1-yf)*xf +
                      f01*(1-xf)*yf +
                      f11*xf*yf
        end
    end

    return zi
end
